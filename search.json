[{"path":[]},{"path":"https:///thechibo.github.io/estim/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https:///thechibo.github.io/estim/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https:///thechibo.github.io/estim/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https:///thechibo.github.io/estim/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https:///thechibo.github.io/estim/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@posit.co. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https:///thechibo.github.io/estim/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https:///thechibo.github.io/estim/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https:///thechibo.github.io/estim/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https:///thechibo.github.io/estim/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https:///thechibo.github.io/estim/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https:///thechibo.github.io/estim/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https:///thechibo.github.io/estim/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to estimators","title":"Contributing to estimators","text":"outlines propose change estimators. detailed discussion contributing tidyverse packages, please see development contributing guide code review principles.","code":""},{"path":"https:///thechibo.github.io/estim/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to estimators","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https:///thechibo.github.io/estim/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to estimators","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). See guide create great issue advice.","code":""},{"path":"https:///thechibo.github.io/estim/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to estimators","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"thechibo/estimators\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https:///thechibo.github.io/estim/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to estimators","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https:///thechibo.github.io/estim/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to estimators","text":"Please note estimators project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https:///thechibo.github.io/estim/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https:///thechibo.github.io/estim/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https:///thechibo.github.io/estim/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https:///thechibo.github.io/estim/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https:///thechibo.github.io/estim/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https:///thechibo.github.io/estim/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https:///thechibo.github.io/estim/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https:///thechibo.github.io/estim/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https:///thechibo.github.io/estim/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https:///thechibo.github.io/estim/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https:///thechibo.github.io/estim/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https:///thechibo.github.io/estim/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https:///thechibo.github.io/estim/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https:///thechibo.github.io/estim/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https:///thechibo.github.io/estim/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https:///thechibo.github.io/estim/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https:///thechibo.github.io/estim/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https:///thechibo.github.io/estim/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https:///thechibo.github.io/estim/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https:///thechibo.github.io/estim/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https:///thechibo.github.io/estim/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https:///thechibo.github.io/estim/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with estimators","title":"Getting help with estimators","text":"Thanks using estimators! filing issue, places explore pieces put together make process smooth possible.","code":""},{"path":"https:///thechibo.github.io/estim/SUPPORT.html","id":"make-a-reprex","dir":"","previous_headings":"","what":"Make a reprex","title":"Getting help with estimators","text":"Start making minimal reproducible example using reprex package. haven’t heard used reprex , ’re treat! Seriously, reprex make R-question-asking endeavors easier (pretty insane ROI five ten minutes ’ll take learn ’s ). additional reprex pointers, check Get help! section tidyverse site.","code":""},{"path":"https:///thechibo.github.io/estim/SUPPORT.html","id":"where-to-ask","dir":"","previous_headings":"","what":"Where to ask?","title":"Getting help with estimators","text":"Armed reprex, next step figure ask. ’s question: start community.rstudio.com, /StackOverflow. people answer questions. ’s bug: ’re right place, file issue. ’re sure: let community help figure ! problem bug feature request, can easily return report . opening new issue, sure search issues pull requests make sure bug hasn’t reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers (e.g. :pr, :closed) needed. example, ’d simply remove :open search issues repo, open closed.","code":""},{"path":"https:///thechibo.github.io/estim/SUPPORT.html","id":"what-happens-next","dir":"","previous_headings":"","what":"What happens next?","title":"Getting help with estimators","text":"efficient possible, development tidyverse packages tends bursty, shouldn’t worry don’t get immediate response. Typically don’t look repo sufficient quantity issues accumulates, ’s burst intense activity focus efforts. makes development efficient avoids expensive context switching problems, cost taking longer get back . process makes good reprex particularly important might multiple months initial report start working . can’t reproduce bug, can’t fix !","code":""},{"path":"https:///thechibo.github.io/estim/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ioannis Oikonomidis. Author, maintainer. Samis Trevezas. Author, thesis advisor.","code":""},{"path":"https:///thechibo.github.io/estim/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Oikonomidis , Trevezas S (2025). estim: Parameter Estimation. R package version 0.11.0, https://thechibo.github.io/estim.","code":"@Manual{,   title = {estim: Parameter Estimation},   author = {Ioannis Oikonomidis and Samis Trevezas},   year = {2025},   note = {R package version 0.11.0},   url = {https://thechibo.github.io/estim}, }"},{"path":[]},{"path":"https:///thechibo.github.io/estim/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Parameter Estimation","text":"estim R package performs parameter estimation common distribution families, making moment, maximum likelihood, state---art estimators accessible.","code":""},{"path":"https:///thechibo.github.io/estim/index.html","id":"key-features","dir":"","previous_headings":"Introduction","what":"Key Features","title":"Parameter Estimation","text":"ll counterpart (e.g. llnorm) calculates log-likelihood, e counterpart (e.g. enorm) performs parameter estimation, v counterpart (e.g. vnorm) calculates asymptotic variance-covariance matrix estimator. Moment functions (mean, median, mode, var, sd, skew, kurt) well functions calculate entropy Fisher Information available distributions. S4-class distribution system developed. Distribution objects can created (e.g. x <- Norm(mean = 2, sd = 1) functions can used generically (e.g. d(x) density function N(2, 1) distribution). Distributions included base R made available, Dirichlet Multivariate Gamma. Parameter estimation performed analytically instead numerically estimators can expressed explicitly. Numerical optimization MLE (whenever required, e.g. Beta Gamma distributions) performed computational efficiency, taking advantage score equation system reduce dimensionality optimization. Functions compute plot common estimator metrics (bias, variance, RMSE) included package allow convenient study comparison estimators.","code":""},{"path":"https:///thechibo.github.io/estim/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Parameter Estimation","text":"can install release version estim CRAN running following line code: can install development version estim github running following line code: details can found estim Github repository.","code":"install.packages(\"estim\") devtools::install_github(\"thechibo/estim\")"},{"path":"https:///thechibo.github.io/estim/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Parameter Estimation","text":"Detailed documentation, along reproducible examples, can found package vignette vignette(topic = \"estim\", package = \"estim\").","code":""},{"path":"https:///thechibo.github.io/estim/index.html","id":"team","dir":"","previous_headings":"","what":"Team","title":"Parameter Estimation","text":"estim package developed Mathematics Department University Athens. package maintainer Ioannis Oikonomidis, working supervision Prof. Samis Trevezas.","code":""},{"path":"https:///thechibo.github.io/estim/reference/Bern.html","id":null,"dir":"Reference","previous_headings":"","what":"Bernoulli Distribution — Bern","title":"Bernoulli Distribution — Bern","text":"Bernoulli Distribution","code":""},{"path":"https:///thechibo.github.io/estim/reference/Bern.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bernoulli Distribution — Bern","text":"","code":"Bern(prob = 0.5)  # S4 method for class 'Bern,numeric' d(distr, x)  # S4 method for class 'Bern,numeric' p(distr, x)  # S4 method for class 'Bern,numeric' qn(distr, x)  # S4 method for class 'Bern,numeric' r(distr, n)  # S4 method for class 'Bern' mean(x)  # S4 method for class 'Bern' median(x)  # S4 method for class 'Bern' mode(x)  # S4 method for class 'Bern' var(x)  # S4 method for class 'Bern' sd(x)  # S4 method for class 'Bern' skew(x)  # S4 method for class 'Bern' kurt(x)  # S4 method for class 'Bern' entro(x)  # S4 method for class 'Bern' finf(x)  llbern(x, prob)  # S4 method for class 'Bern,numeric' ll(distr, x)  ebern(x, type = \"mle\", ...)  # S4 method for class 'Bern,numeric' mle(distr, x)  # S4 method for class 'Bern,numeric' me(distr, x)  vbern(prob, type = \"mle\")  # S4 method for class 'Bern' avar_mle(distr)  # S4 method for class 'Bern' avar_me(distr)"},{"path":"https:///thechibo.github.io/estim/reference/Bern.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bernoulli Distribution — Bern","text":"prob numeric. distribution parameter. distr object class Bern. x object class Bern. function also distr argument, x numeric vector, sample observations. n numeric. sample size. type character, case ignored. estimator type (mle, , ). ... extra arguments.","code":""},{"path":"https:///thechibo.github.io/estim/reference/Bern.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bernoulli Distribution — Bern","text":"type function returns different type object: Distribution Functions: supplied one argument (distr), d(), p(), q(), r(), ll() functions return density, cumulative probability, quantile, random sample generator, log-likelihood functions, respectively. supplied arguments (distr x), evaluate aforementioned functions directly. Moments: Returns numeric, either vector matrix depending moment distribution. moments() function returns list available methods. Estimation: Returns list. estimator unknown parameters. Note distribution families like binomial, multinomial, negative binomial, size returned, since considered known. Variance: Returns named matrix. asymptotic covariance matrix estimator.","code":""},{"path":[]},{"path":"https:///thechibo.github.io/estim/reference/Beta.html","id":null,"dir":"Reference","previous_headings":"","what":"Beta Distribution — Beta","title":"Beta Distribution — Beta","text":"Beta distribution absolute continuous probability distribution support \\(S = [0,1]\\), parameterized two shape parameters, \\(\\alpha > 0\\) \\(\\beta > 0\\).","code":""},{"path":"https:///thechibo.github.io/estim/reference/Beta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Beta Distribution — Beta","text":"","code":"Beta(shape1 = 1, shape2 = 1)  # S4 method for class 'Beta,numeric' d(distr, x)  # S4 method for class 'Beta,numeric' p(distr, x)  # S4 method for class 'Beta,numeric' qn(distr, x)  # S4 method for class 'Beta,numeric' r(distr, n)  # S4 method for class 'Beta' mean(x)  # S4 method for class 'Beta' median(x)  # S4 method for class 'Beta' mode(x)  # S4 method for class 'Beta' var(x)  # S4 method for class 'Beta' sd(x)  # S4 method for class 'Beta' skew(x)  # S4 method for class 'Beta' kurt(x)  # S4 method for class 'Beta' entro(x)  # S4 method for class 'Beta' finf(x)  llbeta(x, shape1, shape2)  # S4 method for class 'Beta,numeric' ll(distr, x)  ebeta(x, type = \"mle\", ...)  # S4 method for class 'Beta,numeric' mle(distr, x, par0 = \"same\", method = \"L-BFGS-B\", lower = 1e-05, upper = Inf)  # S4 method for class 'Beta,numeric' me(distr, x)  # S4 method for class 'Beta,numeric' same(distr, x)  vbeta(shape1, shape2, type = \"mle\")  # S4 method for class 'Beta' avar_mle(distr)  # S4 method for class 'Beta' avar_me(distr)  # S4 method for class 'Beta' avar_same(distr)"},{"path":"https:///thechibo.github.io/estim/reference/Beta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Beta Distribution — Beta","text":"shape1, shape2 numeric. distribution parameters (positive real numbers). distr, x arguments coexist, distr object class Beta x numeric vector, sample observations. moment functions take x argument, x object class Beta instead. n numeric. sample size. type character, case ignored. estimator type (mle, , ). ... extra arguments. par0, method, lower, upper arguments passed optim mle optimization.","code":""},{"path":"https:///thechibo.github.io/estim/reference/Beta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Beta Distribution — Beta","text":"type function returns different type object: Distribution Functions: supplied one argument (distr), d(), p(), q(), r(), ll() functions return density, cumulative probability, quantile, random sample generator, log-likelihood functions, respectively. supplied arguments (distr x), evaluate aforementioned functions directly. Moments: Returns numeric, either vector matrix depending moment distribution. moments() function returns list available methods. Estimation: Returns list. estimator unknown parameters. Note distribution families like binomial, multinomial, negative binomial, size returned, since considered known. Variance: Returns named matrix. asymptotic covariance matrix estimator.","code":""},{"path":"https:///thechibo.github.io/estim/reference/Beta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Beta Distribution — Beta","text":"probability density function (PDF) Beta distribution given : $$ f(x; \\alpha, \\beta) = \\frac{x^{\\alpha - 1} (1 - x)^{\\beta - 1}}{B(\\alpha, \\beta)}, \\quad \\alpha\\\\mathbb{R}_+, \\, \\beta\\\\mathbb{R}_+$$ \\(x \\S = [0, 1]\\), \\(B(\\alpha, \\beta)\\) Beta function: $$ B(\\alpha, \\beta) = \\int_0^1 t^{\\alpha - 1} (1 - t)^{\\beta - 1} dt.$$","code":""},{"path":"https:///thechibo.github.io/estim/reference/Beta.html","id":"moments","dir":"Reference","previous_headings":"","what":"Moments","title":"Beta Distribution — Beta","text":"Beta distribution following known moments: Mean: \\(E[X] = \\frac{\\alpha}{\\alpha + \\beta}.\\) Median: Approximated \\(\\frac{\\alpha - 1/3}{\\alpha + \\beta - 2/3}\\), \\(\\alpha, \\beta > 1\\) Mode: \\(\\frac{\\alpha - 1}{\\alpha + \\beta - 2}\\), \\(\\alpha, \\beta > 1.\\) Variance: \\(Var(X) = \\frac{\\alpha\\beta}{(\\alpha + \\beta)^2 (\\alpha + \\beta + 1)}.\\) Skewness: \\(\\frac{2(\\beta - \\alpha)\\sqrt{\\alpha + \\beta + 1}}{(\\alpha + \\beta + 2)\\sqrt{\\alpha\\beta}}\\) Kurtosis: \\(\\frac{6[(\\alpha - \\beta)^2 (\\alpha + \\beta + 1) - \\alpha\\beta (\\alpha + \\beta + 2)]}{\\alpha\\beta (\\alpha + \\beta + 2) (\\alpha + \\beta + 3)}\\) Entropy: \\(H(X) = \\log B(\\alpha, \\beta) - (\\alpha - 1)\\psi(\\alpha) - (\\beta - 1)\\psi(\\beta) + (\\alpha + \\beta - 2)\\psi(\\alpha + \\beta)\\) Fisher Information: Fisher information matrix \\((\\alpha, \\beta)\\) given : $$ (\\alpha, \\beta) = \\begin{bmatrix} \\psi' (\\alpha) - \\psi' (\\alpha + \\beta) & -\\psi' (\\alpha + \\beta) \\\\ -\\psi' (\\alpha + \\beta) & \\psi' (\\beta) - \\psi' (\\alpha + \\beta) \\end{bmatrix} $$","code":""},{"path":"https:///thechibo.github.io/estim/reference/Beta.html","id":"estimation","dir":"Reference","previous_headings":"","what":"Estimation","title":"Beta Distribution — Beta","text":"parameters \\((\\alpha, \\beta)\\) can estimated using: Method Moments: Solving \\(\\alpha\\) \\(\\beta\\) using sample mean variance. Maximum Likelihood Estimation (MLE): Numerical methods typically used maximize log-likelihood function.","code":""},{"path":"https:///thechibo.github.io/estim/reference/Beta.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Beta Distribution — Beta","text":"Tamae, H., Irie, K. & Kubokawa, T. (2020), score-adjusted approach closed-form estimators gamma beta distributions, Japanese Journal Statistics Data Science 3, 543–561. Papadatos, N. (2022), point estimators gamma beta distributions, arXiv preprint arXiv:2205.10799. Oikonomidis, . & Trevezas, S. (2025), Moment-Type Estimators Dirichlet Multivariate Gamma Distributions, arXiv, https://arxiv.org/abs/2311.15025","code":""},{"path":[]},{"path":"https:///thechibo.github.io/estim/reference/Beta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Beta Distribution — Beta","text":"","code":"# ----------------------------------------------------- # Beta Distribution Example # -----------------------------------------------------  # Create the distribution a <- 3 ; b <- 5 D <- Beta(a, b) x <- c(0.3, 0.8, 0.5) n <- 5  # Density function df <- d(D) ; df(x) # df is a function itself #> [1] 2.268945 0.107520 1.640625 d(D, x) # alternative way to use the function #> [1] 2.268945 0.107520 1.640625  # Distribution function pf <- p(D) ; pf(x) #> [1] 0.3529305 0.9953280 0.7734375 p(D, x) #> [1] 0.3529305 0.9953280 0.7734375  # Inverse distribution function qf <- qn(D) ; qf(x) #> [1] 0.2763397 0.5167578 0.3641161 qn(D, x) #> [1] 0.2763397 0.5167578 0.3641161  # Random Generator function rf <- r(D) ; rf(n) #> [1] 0.14417973 0.42618777 0.04439554 0.37391245 0.50406517 r(D, n) #> [1] 0.62327883 0.09493516 0.32794119 0.32852028 0.32141440  # List of all available moments mom <- moments(D)  # Expectation mean(D) #> [1] 0.375 mom$mean #> [1] 0.375  # Variance and Standard Deviation var(D) #> [1] 0.02604167 sd(D) #> [1] 0.1613743  # Skewness and Excess Kurtosis skew(D) #> [1] 0.3098387 kurt(D) #> [1] 0.04  # Entropy entro(D) #> [1] -0.4301508  # Fisher Information Matrix finf(D) #>            shape1      shape2 #> shape1  0.2617971 -0.13313701 #> shape2 -0.1331370  0.08818594  # Point Estimation - The e Functions  ebeta(x, type = \"mle\") #> $shape1 #> [1] 2.942949 #>  #> $shape2 #> [1] 2.535325 #>  ebeta(x, type = \"me\") #> $shape1 #> [1] 2.610526 #>  #> $shape2 #> [1] 2.284211 #>  ebeta(x, type = \"same\") #> $shape1 #> [1] 2.819973 #>  #> $shape2 #> [1] 2.467476 #>   mle(D, x) #> $shape1 #> [1] 2.942949 #>  #> $shape2 #> [1] 2.535325 #>  me(D, x) #> $shape1 #> [1] 2.610526 #>  #> $shape2 #> [1] 2.284211 #>  same(D, x) #> $shape1 #> [1] 2.819973 #>  #> $shape2 #> [1] 2.467476 #>  e(D, x, type = \"mle\") #> $shape1 #> [1] 2.942949 #>  #> $shape2 #> [1] 2.535325 #>   mle(\"beta\", x) # the distr argument can be a character #> $shape1 #> [1] 2.942949 #>  #> $shape2 #> [1] 2.535325 #>   # Asymptotic Variance - The v Functions  vbeta(a, b, type = \"mle\") #>          shape1   shape2 #> shape1 16.44844 24.83272 #> shape2 24.83272 48.83039 vbeta(a, b, type = \"me\") #>          shape1   shape2 #> shape1 17.64848 26.56970 #> shape2 26.56970 51.39394 vbeta(a, b, type = \"same\") #>          shape1   shape2 #> shape1 16.57719 24.96198 #> shape2 24.96198 49.01071  avar_mle(D) #>          shape1   shape2 #> shape1 16.44844 24.83272 #> shape2 24.83272 48.83039 avar_me(D) #>          shape1   shape2 #> shape1 17.64848 26.56970 #> shape2 26.56970 51.39394 avar_same(D) #>          shape1   shape2 #> shape1 16.57719 24.96198 #> shape2 24.96198 49.01071  avar(D, type = \"mle\") #>          shape1   shape2 #> shape1 16.44844 24.83272 #> shape2 24.83272 48.83039"},{"path":"https:///thechibo.github.io/estim/reference/Binom.html","id":null,"dir":"Reference","previous_headings":"","what":"Binomial Distribution — Binom","title":"Binomial Distribution — Binom","text":"Binomial Distribution","code":""},{"path":"https:///thechibo.github.io/estim/reference/Binom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Binomial Distribution — Binom","text":"","code":"Binom(size = 1, prob = 0.5)  # S4 method for class 'Binom,numeric' d(distr, x)  # S4 method for class 'Binom,numeric' p(distr, x)  # S4 method for class 'Binom,numeric' qn(distr, x)  # S4 method for class 'Binom,numeric' r(distr, n)  # S4 method for class 'Binom' mean(x)  # S4 method for class 'Binom' var(x)  # S4 method for class 'Binom' sd(x)  # S4 method for class 'Binom' skew(x)  # S4 method for class 'Binom' kurt(x)  # S4 method for class 'Binom' entro(x)  # S4 method for class 'Binom' finf(x)  llbinom(x, size, prob)  # S4 method for class 'Binom,numeric' ll(distr, x)  ebinom(x, size, type = \"mle\", ...)  # S4 method for class 'Binom,numeric' mle(distr, x)  # S4 method for class 'Binom,numeric' me(distr, x)  vbinom(size, prob, type = \"mle\")  # S4 method for class 'Binom' avar_mle(distr)  # S4 method for class 'Binom' avar_me(distr)"},{"path":"https:///thechibo.github.io/estim/reference/Binom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Binomial Distribution — Binom","text":"size, prob numeric. distribution parameters. distr object class Binom. x object class Binom. function also distr argument, x numeric vector, sample observations. n numeric. sample size. type character, case ignored. estimator type (mle, , ). ... extra arguments.","code":""},{"path":"https:///thechibo.github.io/estim/reference/Binom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Binomial Distribution — Binom","text":"type function returns different type object: Distribution Functions: supplied one argument (distr), d(), p(), q(), r(), ll() functions return density, cumulative probability, quantile, random sample generator, log-likelihood functions, respectively. supplied arguments (distr x), evaluate aforementioned functions directly. Moments: Returns numeric, either vector matrix depending moment distribution. moments() function returns list available methods. Estimation: Returns list. estimator unknown parameters. Note distribution families like binomial, multinomial, negative binomial, size returned, since considered known. Variance: Returns named matrix. asymptotic covariance matrix estimator.","code":""},{"path":"https:///thechibo.github.io/estim/reference/Cat.html","id":null,"dir":"Reference","previous_headings":"","what":"Categorical Distribution — Cat","title":"Categorical Distribution — Cat","text":"Categorical Distribution","code":""},{"path":"https:///thechibo.github.io/estim/reference/Cat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Categorical Distribution — Cat","text":"","code":"Cat(prob = c(0.5, 0.5))  # S4 method for class 'Cat,numeric' d(distr, x)  # S4 method for class 'Cat,numeric' r(distr, n)  # S4 method for class 'Cat' mean(x)  # S4 method for class 'Cat' mode(x)  # S4 method for class 'Cat' var(x)  # S4 method for class 'Cat' entro(x)  # S4 method for class 'Cat' finf(x)  llcat(x, prob)  # S4 method for class 'Cat,numeric' ll(distr, x)  ecat(x, type = \"mle\", ...)  # S4 method for class 'Cat,numeric' mle(distr, x, dim = NULL)  # S4 method for class 'Cat,numeric' me(distr, x, dim = NULL)  vcat(prob, type = \"mle\")  # S4 method for class 'Cat' avar_mle(distr)  # S4 method for class 'Cat' avar_me(distr)"},{"path":"https:///thechibo.github.io/estim/reference/Cat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Categorical Distribution — Cat","text":"prob numeric. distribution parameters. distr object class Cat. x object class Cat. function also distr argument, x numeric vector, sample observations. n numeric. sample size. type character, case ignored. estimator type (mle, , ). ... extra arguments. dim numeric. parameter dimension. See details.","code":""},{"path":"https:///thechibo.github.io/estim/reference/Cat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Categorical Distribution — Cat","text":"type function returns different type object: Distribution Functions: supplied one argument (distr), d(), p(), q(), r(), ll() functions return density, cumulative probability, quantile, random sample generator, log-likelihood functions, respectively. supplied arguments (distr x), evaluate aforementioned functions directly. Moments: Returns numeric, either vector matrix depending moment distribution. moments() function returns list available methods. Estimation: Returns list. estimator unknown parameters. Note distribution families like binomial, multinomial, negative binomial, size returned, since considered known. Variance: Returns named matrix. asymptotic covariance matrix estimator.","code":""},{"path":"https:///thechibo.github.io/estim/reference/Cat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Categorical Distribution — Cat","text":"estimation prob sample default return vector probabilities corresponding categories appeared sample 0 rest. However, parameter dimension uncovered sample, provided separately. can done argument dim. dim supplied, dimension retrieved distr argument. Categories appear sample 0 probabilities appended end prob vector. Note actual dimension probability parameter vector k-1, therefore Fisher information matrix asymptotic variance - covariance matrix estimators dimension (k-1)x(k-1).","code":""},{"path":"https:///thechibo.github.io/estim/reference/Cauchy.html","id":null,"dir":"Reference","previous_headings":"","what":"Cauchy Distribution — Cauchy","title":"Cauchy Distribution — Cauchy","text":"Cauchy Distribution","code":""},{"path":"https:///thechibo.github.io/estim/reference/Cauchy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cauchy Distribution — Cauchy","text":"","code":"Cauchy(location = 0, scale = 1)  # S4 method for class 'Cauchy,numeric' d(distr, x)  # S4 method for class 'Cauchy,numeric' p(distr, x)  # S4 method for class 'Cauchy,numeric' qn(distr, x)  # S4 method for class 'Cauchy,numeric' r(distr, n)  # S4 method for class 'Cauchy' mean(x)  # S4 method for class 'Cauchy' median(x)  # S4 method for class 'Cauchy' mode(x)  # S4 method for class 'Cauchy' var(x)  # S4 method for class 'Cauchy' sd(x)  # S4 method for class 'Cauchy' skew(x)  # S4 method for class 'Cauchy' kurt(x)  # S4 method for class 'Cauchy' entro(x)  # S4 method for class 'Cauchy' finf(x)  llcauchy(x, location, scale)  # S4 method for class 'Cauchy,numeric' ll(distr, x)  ecauchy(x, type = \"mle\", ...)  # S4 method for class 'Cauchy,numeric' mle(   distr,   x,   par0 = \"me\",   method = \"L-BFGS-B\",   lower = c(-Inf, 1e-05),   upper = c(Inf, Inf) )  # S4 method for class 'Cauchy,numeric' me(distr, x)  vcauchy(location, scale, type = \"mle\")  # S4 method for class 'Cauchy' avar_mle(distr)"},{"path":"https:///thechibo.github.io/estim/reference/Cauchy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cauchy Distribution — Cauchy","text":"location, scale numeric. distribution parameters. distr object class Cauchy. x object class Cauchy. function also distr argument, x numeric vector, sample observations. n numeric. sample size. type character, case ignored. estimator type (mle, , ). ... extra arguments. par0, method, lower, upper arguments passed optim.","code":""},{"path":"https:///thechibo.github.io/estim/reference/Cauchy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cauchy Distribution — Cauchy","text":"type function returns different type object: Distribution Functions: supplied one argument (distr), d(), p(), q(), r(), ll() functions return density, cumulative probability, quantile, random sample generator, log-likelihood functions, respectively. supplied arguments (distr x), evaluate aforementioned functions directly. Moments: Returns numeric, either vector matrix depending moment distribution. moments() function returns list available methods. Estimation: Returns list. estimator unknown parameters. Note distribution families like binomial, multinomial, negative binomial, size returned, since considered known. Variance: Returns named matrix. asymptotic covariance matrix estimator.","code":""},{"path":"https:///thechibo.github.io/estim/reference/Chisq.html","id":null,"dir":"Reference","previous_headings":"","what":"Chi-Square Distribution — Chisq","title":"Chi-Square Distribution — Chisq","text":"Chi-Square Distribution","code":""},{"path":"https:///thechibo.github.io/estim/reference/Chisq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chi-Square Distribution — Chisq","text":"","code":"Chisq(df = 1)  # S4 method for class 'Chisq,numeric' d(distr, x)  # S4 method for class 'Chisq,numeric' p(distr, x)  # S4 method for class 'Chisq,numeric' qn(distr, x)  # S4 method for class 'Chisq,numeric' r(distr, n)  # S4 method for class 'Chisq' mean(x)  # S4 method for class 'Chisq' median(x)  # S4 method for class 'Chisq' mode(x)  # S4 method for class 'Chisq' var(x)  # S4 method for class 'Chisq' sd(x)  # S4 method for class 'Chisq' skew(x)  # S4 method for class 'Chisq' kurt(x)  # S4 method for class 'Chisq' entro(x)  # S4 method for class 'Chisq' finf(x)  llchisq(x, df)  # S4 method for class 'Chisq,numeric' ll(distr, x)  echisq(x, type = \"mle\", ...)  # S4 method for class 'Chisq,numeric' mle(distr, x)  # S4 method for class 'Chisq,numeric' me(distr, x)  vchisq(df, type = \"mle\")  # S4 method for class 'Chisq' avar_mle(distr)  # S4 method for class 'Chisq' avar_me(distr)"},{"path":"https:///thechibo.github.io/estim/reference/Chisq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chi-Square Distribution — Chisq","text":"df numeric. distribution parameters. distr object class Chisq. x object class Chisq. function also distr argument, x numeric vector, sample observations. n numeric. sample size. type character, case ignored. estimator type (mle, , ). ... extra arguments.","code":""},{"path":"https:///thechibo.github.io/estim/reference/Chisq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Chi-Square Distribution — Chisq","text":"type function returns different type object: Distribution Functions: supplied one argument (distr), d(), p(), q(), r(), ll() functions return density, cumulative probability, quantile, random sample generator, log-likelihood functions, respectively. supplied arguments (distr x), evaluate aforementioned functions directly. Moments: Returns numeric, either vector matrix depending moment distribution. moments() function returns list available methods. Estimation: Returns list. estimator unknown parameters. Note distribution families like binomial, multinomial, negative binomial, size returned, since considered known. Variance: Returns named matrix. asymptotic covariance matrix estimator.","code":""},{"path":"https:///thechibo.github.io/estim/reference/Dir.html","id":null,"dir":"Reference","previous_headings":"","what":"Dirichlet Distribution — Dir","title":"Dirichlet Distribution — Dir","text":"Dirichlet Distribution","code":""},{"path":"https:///thechibo.github.io/estim/reference/Dir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dirichlet Distribution — Dir","text":"","code":"Dir(alpha = c(1, 1))  # S4 method for class 'Dir,numeric' d(distr, x)  # S4 method for class 'Dir,numeric' r(distr, n)  # S4 method for class 'Dir' mean(x)  # S4 method for class 'Dir' mode(x)  # S4 method for class 'Dir' var(x)  # S4 method for class 'Dir' entro(x)  # S4 method for class 'Dir' finf(x)  lldirichlet(x, alpha)  # S4 method for class 'Dir,matrix' ll(distr, x)  edirichlet(x, type = \"mle\", ...)  # S4 method for class 'Dir,matrix' mle(distr, x, par0 = \"same\", method = \"L-BFGS-B\", lower = 1e-05, upper = Inf)  # S4 method for class 'Dir,matrix' me(distr, x)  # S4 method for class 'Dir,matrix' same(distr, x)  vdirichlet(alpha, type = \"mle\")  # S4 method for class 'Dir' avar_mle(distr)  # S4 method for class 'Dir' avar_me(distr)  # S4 method for class 'Dir' avar_same(distr)"},{"path":"https:///thechibo.github.io/estim/reference/Dir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dirichlet Distribution — Dir","text":"alpha numeric. distribution parameters. distr object class Dir. x object class Dir. function also distr argument, x numeric vector, sample observations. n numeric. sample size. type character, case ignored. estimator type (mle, , ). ... extra arguments. par0, method, lower, upper arguments passed optim.","code":""},{"path":"https:///thechibo.github.io/estim/reference/Dir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dirichlet Distribution — Dir","text":"type function returns different type object: Distribution Functions: supplied one argument (distr), d(), p(), q(), r(), ll() functions return density, cumulative probability, quantile, random sample generator, log-likelihood functions, respectively. supplied arguments (distr x), evaluate aforementioned functions directly. Moments: Returns numeric, either vector matrix depending moment distribution. moments() function returns list available methods. Estimation: Returns list. estimator unknown parameters. Note distribution families like binomial, multinomial, negative binomial, size returned, since considered known. Variance: Returns named matrix. asymptotic covariance matrix estimator.","code":""},{"path":"https:///thechibo.github.io/estim/reference/DistrFunctionals.html","id":null,"dir":"Reference","previous_headings":"","what":"Distribution Functionals — DistrFunctionals","title":"Distribution Functionals — DistrFunctionals","text":"collection S4 classes provide flexible structured way work probability distributions.","code":""},{"path":"https:///thechibo.github.io/estim/reference/DistrFunctionals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distribution Functionals — DistrFunctionals","text":"","code":"# S4 method for class 'Distribution,missing' d(distr, x, ...)  # S4 method for class 'Distribution,missing' p(distr, x, ...)  # S4 method for class 'Distribution,missing' qn(distr, x, ...)  # S4 method for class 'Distribution,missing' r(distr, n, ...)  # S4 method for class 'Distribution,missing' ll(distr, x, ...)  # S4 method for class 'Distribution,missing' mle(distr, x, ...)  # S4 method for class 'Distribution,missing' me(distr, x, ...)  # S4 method for class 'Distribution,missing' same(distr, x, ...)"},{"path":"https:///thechibo.github.io/estim/reference/DistrFunctionals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distribution Functionals — DistrFunctionals","text":"distr Distribution object. x, n missing. Agruments supplied. ... extra arguments.","code":""},{"path":"https:///thechibo.github.io/estim/reference/DistrFunctionals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distribution Functionals — DistrFunctionals","text":"supplied one argument, d(), p(), q(), r() ll() functions return density, cumulative probability, quantile, random sample generator, log-likelihood functions, respectively.","code":""},{"path":"https:///thechibo.github.io/estim/reference/DistrFunctionals.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Distribution Functionals — DistrFunctionals","text":"x n missing, methods return function takes input missing argument, allowing user work function object . See examples.","code":""},{"path":[]},{"path":"https:///thechibo.github.io/estim/reference/DistrFunctionals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distribution Functionals — DistrFunctionals","text":"","code":"# ----------------------------------------------------- # Beta Distribution Example # -----------------------------------------------------  # Create the distribution D <- Beta(3, 5) x <- c(0.3, 0.8, 0.5) n <- 5  # Density function df <- d(D) ; df(x) # df is a function itself #> [1] 2.268945 0.107520 1.640625 d(D, x) # alternative way to use the function #> [1] 2.268945 0.107520 1.640625  # Distribution function pf <- p(D) ; pf(x) #> [1] 0.3529305 0.9953280 0.7734375 p(D, x) #> [1] 0.3529305 0.9953280 0.7734375  # Inverse distribution function qf <- qn(D) ; qf(x) #> [1] 0.2763397 0.5167578 0.3641161 qn(D, x) #> [1] 0.2763397 0.5167578 0.3641161  # Random Generator function rf <- r(D) ; rf(n) #> [1] 0.27315023 0.50569543 0.11579971 0.48033934 0.09075043 r(D, n) #> [1] 0.2786339 0.3647822 0.4869432 0.2139102 0.4708356"},{"path":"https:///thechibo.github.io/estim/reference/Distributions.html","id":null,"dir":"Reference","previous_headings":"","what":"Distribution S4 Classes — Distributions","title":"Distribution S4 Classes — Distributions","text":"collection S4 classes provide flexible structured way work probability distributions.","code":""},{"path":"https:///thechibo.github.io/estim/reference/Distributions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distribution S4 Classes — Distributions","text":"","code":"d(distr, x, ...)  p(distr, x, ...)  qn(distr, x, ...)  r(distr, n, ...)"},{"path":"https:///thechibo.github.io/estim/reference/Distributions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distribution S4 Classes — Distributions","text":"distr Distribution object. x numeric. point evaluate function. ... extra arguments. n numeric. sample size.","code":""},{"path":"https:///thechibo.github.io/estim/reference/Distributions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distribution S4 Classes — Distributions","text":"type function returns different type object: Distribution Functions: supplied one argument (distr), d(), p(), q(), r(), ll() functions return density, cumulative probability, quantile, random sample generator, log-likelihood functions, respectively. supplied arguments (distr x), evaluate aforementioned functions directly. Moments: Returns numeric, either vector matrix depending moment distribution. moments() function returns list available methods. Estimation: Returns list. estimator unknown parameters. Note distribution families like binomial, multinomial, negative binomial, size returned, since considered known. Variance: Returns named matrix. asymptotic covariance matrix estimator.","code":""},{"path":"https:///thechibo.github.io/estim/reference/Distributions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Distribution S4 Classes — Distributions","text":"S4 generic methods can work functions functionals (functions return functions). available distribution families coded S4 classes, specifically subclasses Distribution superclass. methods can used two ways: Option 1: distr argument x n supplied, function evaluated directly, usual. Option 2: distr argument supplied, method returns function takes input missing argument x n, allowing user work function object . See examples. Looking specific distribution family? help page general. Use help page distribution see available methods class, details, examples. Check See Also section.","code":""},{"path":"https:///thechibo.github.io/estim/reference/Distributions.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Distribution S4 Classes — Distributions","text":"d(): density function p(): cumulative distribution function qn(): generalized inverse distribution function r(): random sample generator function","code":""},{"path":[]},{"path":"https:///thechibo.github.io/estim/reference/Distributions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distribution S4 Classes — Distributions","text":"","code":"# ----------------------------------------------------- # Beta Distribution Example # -----------------------------------------------------  # Create the distribution D <- Beta(3, 5) x <- c(0.3, 0.8, 0.5) n <- 5  # Density function df <- d(D) ; df(x) # df is a function itself #> [1] 2.268945 0.107520 1.640625 d(D, x) # alternative way to use the function #> [1] 2.268945 0.107520 1.640625  # Distribution function pf <- p(D) ; pf(x) #> [1] 0.3529305 0.9953280 0.7734375 p(D, x) #> [1] 0.3529305 0.9953280 0.7734375  # Inverse distribution function qf <- qn(D) ; qf(x) #> [1] 0.2763397 0.5167578 0.3641161 qn(D, x) #> [1] 0.2763397 0.5167578 0.3641161  # Random Generator function rf <- r(D) ; rf(n) #> [1] 0.4485475 0.1568602 0.3561605 0.2105236 0.3718898 r(D, n) #> [1] 0.2277145 0.1299583 0.5743616 0.4101034 0.4237988"},{"path":"https:///thechibo.github.io/estim/reference/Exp.html","id":null,"dir":"Reference","previous_headings":"","what":"Exponential Distribution — Exp","title":"Exponential Distribution — Exp","text":"Exponential Distribution","code":""},{"path":"https:///thechibo.github.io/estim/reference/Exp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exponential Distribution — Exp","text":"","code":"Exp(rate = 1)  # S4 method for class 'Exp,numeric' d(distr, x)  # S4 method for class 'Exp,numeric' p(distr, x)  # S4 method for class 'Exp,numeric' qn(distr, x)  # S4 method for class 'Exp,numeric' r(distr, n)  # S4 method for class 'Exp' mean(x)  # S4 method for class 'Exp' median(x)  # S4 method for class 'Exp' mode(x)  # S4 method for class 'Exp' var(x)  # S4 method for class 'Exp' sd(x)  # S4 method for class 'Exp' skew(x)  # S4 method for class 'Exp' kurt(x)  # S4 method for class 'Exp' entro(x)  # S4 method for class 'Exp' finf(x)  llexp(x, rate)  # S4 method for class 'Exp,numeric' ll(distr, x)  eexp(x, type = \"mle\", ...)  # S4 method for class 'Exp,numeric' mle(distr, x)  # S4 method for class 'Exp,numeric' me(distr, x)  vexp(rate, type = \"mle\")  # S4 method for class 'Exp' avar_mle(distr)  # S4 method for class 'Exp' avar_me(distr)"},{"path":"https:///thechibo.github.io/estim/reference/Exp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exponential Distribution — Exp","text":"rate numeric. distribution parameters. distr object class Exp. x object class Exp. function also distr argument, x numeric vector, sample observations. n numeric. sample size. type character, case ignored. estimator type (mle, , ). ... extra arguments.","code":""},{"path":"https:///thechibo.github.io/estim/reference/Exp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Exponential Distribution — Exp","text":"type function returns different type object: Distribution Functions: supplied one argument (distr), d(), p(), q(), r(), ll() functions return density, cumulative probability, quantile, random sample generator, log-likelihood functions, respectively. supplied arguments (distr x), evaluate aforementioned functions directly. Moments: Returns numeric, either vector matrix depending moment distribution. moments() function returns list available methods. Estimation: Returns list. estimator unknown parameters. Note distribution families like binomial, multinomial, negative binomial, size returned, since considered known. Variance: Returns named matrix. asymptotic covariance matrix estimator.","code":""},{"path":"https:///thechibo.github.io/estim/reference/Fisher.html","id":null,"dir":"Reference","previous_headings":"","what":"Fisher Distribution — Fisher","title":"Fisher Distribution — Fisher","text":"Fisher Distribution","code":""},{"path":"https:///thechibo.github.io/estim/reference/Fisher.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fisher Distribution — Fisher","text":"","code":"Fisher(df1 = 1, df2 = 1)  # S4 method for class 'Fisher,numeric' d(distr, x)  # S4 method for class 'Fisher,numeric' p(distr, x)  # S4 method for class 'Fisher,numeric' qn(distr, x)  # S4 method for class 'Fisher,numeric' r(distr, n)  # S4 method for class 'Fisher' mean(x)  # S4 method for class 'Fisher' median(x)  # S4 method for class 'Fisher' mode(x)  # S4 method for class 'Fisher' var(x)  # S4 method for class 'Fisher' sd(x)  # S4 method for class 'Fisher' skew(x)  # S4 method for class 'Fisher' kurt(x)  # S4 method for class 'Fisher' entro(x)  llf(x, df1, df2)  # S4 method for class 'Fisher,numeric' ll(distr, x)"},{"path":"https:///thechibo.github.io/estim/reference/Fisher.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fisher Distribution — Fisher","text":"df1, df2 numeric. distribution parameters. distr object class Fisher. x object class Fisher. function also distr argument, x numeric vector, sample observations. n numeric. sample size.","code":""},{"path":"https:///thechibo.github.io/estim/reference/Fisher.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fisher Distribution — Fisher","text":"type function returns different type object: Distribution Functions: supplied one argument (distr), d(), p(), q(), r(), ll() functions return density, cumulative probability, quantile, random sample generator, log-likelihood functions, respectively. supplied arguments (distr x), evaluate aforementioned functions directly. Moments: Returns numeric, either vector matrix depending moment distribution. moments() function returns list available methods. Estimation: Returns list. estimator unknown parameters. Note distribution families like binomial, multinomial, negative binomial, size returned, since considered known. Variance: Returns named matrix. asymptotic covariance matrix estimator.","code":""},{"path":"https:///thechibo.github.io/estim/reference/Gam.html","id":null,"dir":"Reference","previous_headings":"","what":"Gamma Distribution — Gam","title":"Gamma Distribution — Gam","text":"Gamma Distribution","code":""},{"path":"https:///thechibo.github.io/estim/reference/Gam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gamma Distribution — Gam","text":"","code":"Gam(shape = 1, scale = 1)  # S4 method for class 'Gam,numeric' d(distr, x)  # S4 method for class 'Gam,numeric' p(distr, x)  # S4 method for class 'Gam,numeric' qn(distr, x)  # S4 method for class 'Gam,numeric' r(distr, n)  # S4 method for class 'Gam' mean(x)  # S4 method for class 'Gam' median(x)  # S4 method for class 'Gam' mode(x)  # S4 method for class 'Gam' var(x)  # S4 method for class 'Gam' sd(x)  # S4 method for class 'Gam' skew(x)  # S4 method for class 'Gam' kurt(x)  # S4 method for class 'Gam' entro(x)  # S4 method for class 'Gam' finf(x)  llgamma(x, shape, scale)  # S4 method for class 'Gam,numeric' ll(distr, x)  egamma(x, type = \"mle\", ...)  # S4 method for class 'Gam,numeric' mle(distr, x, par0 = \"same\", method = \"L-BFGS-B\", lower = 1e-05, upper = Inf)  # S4 method for class 'Gam,numeric' me(distr, x)  # S4 method for class 'Gam,numeric' same(distr, x)  vgamma(shape, scale, type = \"mle\")  # S4 method for class 'Gam' avar_mle(distr)  # S4 method for class 'Gam' avar_me(distr)  # S4 method for class 'Gam' avar_same(distr)"},{"path":"https:///thechibo.github.io/estim/reference/Gam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gamma Distribution — Gam","text":"shape, scale numeric. distribution parameters. distr object class Gam. x object class Gam. function also distr argument, x numeric vector, sample observations. n numeric. sample size. type character, case ignored. estimator type (mle, , ). ... extra arguments. par0, method, lower, upper arguments passed optim.","code":""},{"path":"https:///thechibo.github.io/estim/reference/Gam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gamma Distribution — Gam","text":"type function returns different type object: Distribution Functions: supplied one argument (distr), d(), p(), q(), r(), ll() functions return density, cumulative probability, quantile, random sample generator, log-likelihood functions, respectively. supplied arguments (distr x), evaluate aforementioned functions directly. Moments: Returns numeric, either vector matrix depending moment distribution. moments() function returns list available methods. Estimation: Returns list. estimator unknown parameters. Note distribution families like binomial, multinomial, negative binomial, size returned, since considered known. Variance: Returns named matrix. asymptotic covariance matrix estimator.","code":""},{"path":"https:///thechibo.github.io/estim/reference/Geom.html","id":null,"dir":"Reference","previous_headings":"","what":"Geometric Distribution — Geom","title":"Geometric Distribution — Geom","text":"Geometric Distribution","code":""},{"path":"https:///thechibo.github.io/estim/reference/Geom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Geometric Distribution — Geom","text":"","code":"Geom(prob = 0.5)  # S4 method for class 'Geom,numeric' d(distr, x)  # S4 method for class 'Geom,numeric' p(distr, x)  # S4 method for class 'Geom,numeric' qn(distr, x)  # S4 method for class 'Geom,numeric' r(distr, n)  # S4 method for class 'Geom' mean(x)  # S4 method for class 'Geom' median(x)  # S4 method for class 'Geom' mode(x)  # S4 method for class 'Geom' var(x)  # S4 method for class 'Geom' sd(x)  # S4 method for class 'Geom' skew(x)  # S4 method for class 'Geom' kurt(x)  # S4 method for class 'Geom' entro(x)  # S4 method for class 'Geom' finf(x)  llgeom(x, prob)  # S4 method for class 'Geom,numeric' ll(distr, x)  egeom(x, type = \"mle\", ...)  # S4 method for class 'Geom,numeric' mle(distr, x)  # S4 method for class 'Geom,numeric' me(distr, x)  vgeom(prob, type = \"mle\")  # S4 method for class 'Geom' avar_mle(distr)  # S4 method for class 'Geom' avar_me(distr)"},{"path":"https:///thechibo.github.io/estim/reference/Geom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Geometric Distribution — Geom","text":"prob numeric. distribution parameters. distr object class Geom. x object class Geom. function also distr argument, x numeric vector, sample observations. n numeric. sample size. type character, case ignored. estimator type (mle, , ). ... extra arguments.","code":""},{"path":"https:///thechibo.github.io/estim/reference/Geom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Geometric Distribution — Geom","text":"type function returns different type object: Distribution Functions: supplied one argument (distr), d(), p(), q(), r(), ll() functions return density, cumulative probability, quantile, random sample generator, log-likelihood functions, respectively. supplied arguments (distr x), evaluate aforementioned functions directly. Moments: Returns numeric, either vector matrix depending moment distribution. moments() function returns list available methods. Estimation: Returns list. estimator unknown parameters. Note distribution families like binomial, multinomial, negative binomial, size returned, since considered known. Variance: Returns named matrix. asymptotic covariance matrix estimator.","code":""},{"path":"https:///thechibo.github.io/estim/reference/Laplace.html","id":null,"dir":"Reference","previous_headings":"","what":"Laplace Distribution — Laplace","title":"Laplace Distribution — Laplace","text":"Laplace Distribution","code":""},{"path":"https:///thechibo.github.io/estim/reference/Laplace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Laplace Distribution — Laplace","text":"","code":"Laplace(mu = 0, sigma = 1)  # S4 method for class 'Laplace,numeric' d(distr, x)  # S4 method for class 'Laplace,numeric' p(distr, x)  # S4 method for class 'Laplace,numeric' qn(distr, x)  # S4 method for class 'Laplace,numeric' r(distr, n)  # S4 method for class 'Laplace' mean(x)  # S4 method for class 'Laplace' median(x)  # S4 method for class 'Laplace' mode(x)  # S4 method for class 'Laplace' var(x)  # S4 method for class 'Laplace' sd(x)  # S4 method for class 'Laplace' skew(x)  # S4 method for class 'Laplace' kurt(x)  # S4 method for class 'Laplace' entro(x)  # S4 method for class 'Laplace' finf(x)  lllaplace(x, mu, sigma)  # S4 method for class 'Laplace,numeric' ll(distr, x)  elaplace(x, type = \"mle\", ...)  # S4 method for class 'Laplace,numeric' mle(distr, x)  # S4 method for class 'Laplace,numeric' me(distr, x)  vlaplace(mu, sigma, type = \"mle\")  # S4 method for class 'Laplace' avar_mle(distr)  # S4 method for class 'Laplace' avar_me(distr)"},{"path":"https:///thechibo.github.io/estim/reference/Laplace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Laplace Distribution — Laplace","text":"mu, sigma numeric. distribution parameters. distr object class Laplace. x object class Laplace. function also distr argument, x numeric vector, sample observations. n numeric. sample size. type character, case ignored. estimator type (mle, , ). ... extra arguments.","code":""},{"path":"https:///thechibo.github.io/estim/reference/Laplace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Laplace Distribution — Laplace","text":"type function returns different type object: Distribution Functions: supplied one argument (distr), d(), p(), q(), r(), ll() functions return density, cumulative probability, quantile, random sample generator, log-likelihood functions, respectively. supplied arguments (distr x), evaluate aforementioned functions directly. Moments: Returns numeric, either vector matrix depending moment distribution. moments() function returns list available methods. Estimation: Returns list. estimator unknown parameters. Note distribution families like binomial, multinomial, negative binomial, size returned, since considered known. Variance: Returns named matrix. asymptotic covariance matrix estimator.","code":""},{"path":"https:///thechibo.github.io/estim/reference/LargeMetrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Large Sample Metrics — LargeMetrics","title":"Large Sample Metrics — LargeMetrics","text":"function calculates asymptotic variance - covariance matrix characterizing large sample (asymptotic) behavior estimator. function evaluates metrics function single parameter, keeping ones constant. See Details.","code":""},{"path":"https:///thechibo.github.io/estim/reference/LargeMetrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Large Sample Metrics — LargeMetrics","text":"","code":"LargeMetrics(D, est, df)  large_metrics(D, prm, est = c(\"same\", \"me\", \"mle\"), ...)"},{"path":"https:///thechibo.github.io/estim/reference/LargeMetrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Large Sample Metrics — LargeMetrics","text":"D subclass Distribution. distribution family interest. est character. estimator interest. Can vector. df data.frame. data.frame columns named \"Row\", \"Col\", \"Parameter\", \"Estimator\", \"Value\". prm list containing three elements (name, pos, val). See Details. ... extra arguments.","code":""},{"path":"https:///thechibo.github.io/estim/reference/LargeMetrics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Large Sample Metrics — LargeMetrics","text":"object class LargeMetrics slots D, est, df.","code":""},{"path":"https:///thechibo.github.io/estim/reference/LargeMetrics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Large Sample Metrics — LargeMetrics","text":"distribution D used specify initial distribution. list prm contains details concerning single parameter allowed change values. quantity interest evaluated function parameter. prm list includes two elements named \"name\" \"val\". first one specifies parameter changes, second one numeric vector holding values takes. case parameter interest vector, third element named \"pos\" can specified indicate exact paramater changes. example shown , evaluation performed Dirichlet distributions shape parameters (0.5, 1), (0.6, 1), ..., (2, 1). Notice initial shape parameter value (1) utilized function.","code":""},{"path":[]},{"path":"https:///thechibo.github.io/estim/reference/LargeMetrics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Large Sample Metrics — LargeMetrics","text":"","code":"# \\donttest{ # ----------------------------------------------------- # Beta Distribution Example # -----------------------------------------------------  D <- Beta(shape1 = 1, shape2 = 2)  prm <- list(name = \"shape1\",             val = seq(0.5, 2, by = 0.1))  x <- large_metrics(D, prm,                    est = c(\"mle\", \"me\", \"same\"))  plot(x)   # ----------------------------------------------------- # Dirichlet Distribution Example # -----------------------------------------------------  D <- Dir(alpha = 1:2)  prm <- list(name = \"alpha\",             pos = 1,             val = seq(0.5, 2, by = 0.1))  x <- large_metrics(D, prm,                    est = c(\"mle\", \"me\", \"same\"))  plot(x)  # }"},{"path":"https:///thechibo.github.io/estim/reference/Lnorm.html","id":null,"dir":"Reference","previous_headings":"","what":"Lnorm Distribution — Lnorm","title":"Lnorm Distribution — Lnorm","text":"Lnorm Distribution","code":""},{"path":"https:///thechibo.github.io/estim/reference/Lnorm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lnorm Distribution — Lnorm","text":"","code":"Lnorm(meanlog = 0, sdlog = 1)  # S4 method for class 'Lnorm,numeric' d(distr, x)  # S4 method for class 'Lnorm,numeric' p(distr, x)  # S4 method for class 'Lnorm,numeric' qn(distr, x)  # S4 method for class 'Lnorm,numeric' r(distr, n)  # S4 method for class 'Lnorm' mean(x)  # S4 method for class 'Lnorm' median(x)  # S4 method for class 'Lnorm' mode(x)  # S4 method for class 'Lnorm' var(x)  # S4 method for class 'Lnorm' sd(x)  # S4 method for class 'Lnorm' skew(x)  # S4 method for class 'Lnorm' kurt(x)  # S4 method for class 'Lnorm' entro(x)  # S4 method for class 'Lnorm' finf(x)  lllnorm(x, meanlog, sdlog)  # S4 method for class 'Lnorm,numeric' ll(distr, x)  elnorm(x, type = \"mle\", ...)  # S4 method for class 'Lnorm,numeric' mle(distr, x)  # S4 method for class 'Lnorm,numeric' me(distr, x)  vlnorm(meanlog, sdlog, type = \"mle\")  # S4 method for class 'Lnorm' avar_mle(distr)  # S4 method for class 'Lnorm' avar_me(distr)"},{"path":"https:///thechibo.github.io/estim/reference/Lnorm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lnorm Distribution — Lnorm","text":"meanlog, sdlog numeric. distribution parameters. distr object class Lnorm. x object class Lnorm. function also distr argument, x numeric vector, sample observations. n numeric. sample size. type character, case ignored. estimator type (mle, , ). ... extra arguments.","code":""},{"path":"https:///thechibo.github.io/estim/reference/Lnorm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lnorm Distribution — Lnorm","text":"type function returns different type object: Distribution Functions: supplied one argument (distr), d(), p(), q(), r(), ll() functions return density, cumulative probability, quantile, random sample generator, log-likelihood functions, respectively. supplied arguments (distr x), evaluate aforementioned functions directly. Moments: Returns numeric, either vector matrix depending moment distribution. moments() function returns list available methods. Estimation: Returns list. estimator unknown parameters. Note distribution families like binomial, multinomial, negative binomial, size returned, since considered known. Variance: Returns named matrix. asymptotic covariance matrix estimator.","code":""},{"path":"https:///thechibo.github.io/estim/reference/Multigam.html","id":null,"dir":"Reference","previous_headings":"","what":"Gamma Distribution — Multigam","title":"Gamma Distribution — Multigam","text":"Gamma Distribution","code":""},{"path":"https:///thechibo.github.io/estim/reference/Multigam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gamma Distribution — Multigam","text":"","code":"Multigam(shape = 1, scale = 1)  dmultigam(x, shape, scale, log = FALSE)  rmultigam(n, shape, scale)  # S4 method for class 'Multigam,numeric' d(distr, x)  # S4 method for class 'Multigam,numeric' r(distr, n)  # S4 method for class 'Multigam' mean(x)  # S4 method for class 'Multigam' var(x)  # S4 method for class 'Multigam' finf(x)  llmultigam(x, shape, scale)  # S4 method for class 'Multigam,matrix' ll(distr, x)  emultigam(x, type = \"mle\", ...)  # S4 method for class 'Multigam,matrix' mle(distr, x, par0 = \"same\", method = \"L-BFGS-B\", lower = 1e-05, upper = Inf)  # S4 method for class 'Multigam,matrix' me(distr, x)  # S4 method for class 'Multigam,matrix' same(distr, x)  vmultigam(shape, scale, type = \"mle\")  # S4 method for class 'Multigam' avar_mle(distr)  # S4 method for class 'Multigam' avar_me(distr)  # S4 method for class 'Multigam' avar_same(distr)"},{"path":"https:///thechibo.github.io/estim/reference/Multigam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gamma Distribution — Multigam","text":"shape, scale numeric. distribution parameters. x object class Multigam. function also distr argument, x numeric vector, sample observations. log logical. log density returned? n numeric. sample size. distr object class Multigam. type character, case ignored. estimator type (mle, , ). ... extra arguments. par0, method, lower, upper arguments passed optim.","code":""},{"path":"https:///thechibo.github.io/estim/reference/Multigam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gamma Distribution — Multigam","text":"type function returns different type object: Distribution Functions: supplied one argument (distr), d(), p(), q(), r(), ll() functions return density, cumulative probability, quantile, random sample generator, log-likelihood functions, respectively. supplied arguments (distr x), evaluate aforementioned functions directly. Moments: Returns numeric, either vector matrix depending moment distribution. moments() function returns list available methods. Estimation: Returns list. estimator unknown parameters. Note distribution families like binomial, multinomial, negative binomial, size returned, since considered known. Variance: Returns named matrix. asymptotic covariance matrix estimator.","code":""},{"path":"https:///thechibo.github.io/estim/reference/Multinom.html","id":null,"dir":"Reference","previous_headings":"","what":"Multinomial Distribution — Multinom","title":"Multinomial Distribution — Multinom","text":"Multinomial Distribution","code":""},{"path":"https:///thechibo.github.io/estim/reference/Multinom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multinomial Distribution — Multinom","text":"","code":"Multinom(size = 1, prob = c(0.5, 0.5))  # S4 method for class 'Multinom,numeric' d(distr, x)  # S4 method for class 'Multinom,numeric' r(distr, n)  # S4 method for class 'Multinom' mean(x)  # S4 method for class 'Multinom' mode(x)  # S4 method for class 'Multinom' var(x)  # S4 method for class 'Multinom' entro(x)  # S4 method for class 'Multinom' finf(x)  llmultinom(x, size, prob)  # S4 method for class 'Multinom,matrix' ll(distr, x)  emultinom(x, type = \"mle\", ...)  # S4 method for class 'Multinom,matrix' mle(distr, x)  # S4 method for class 'Multinom,matrix' me(distr, x)  vmultinom(size, prob, type = \"mle\")  # S4 method for class 'Multinom' avar_mle(distr)  # S4 method for class 'Multinom' avar_me(distr)"},{"path":"https:///thechibo.github.io/estim/reference/Multinom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multinomial Distribution — Multinom","text":"size, prob numeric. distribution parameters. distr object class Multinom. x object class Multinom. function also distr argument, x numeric vector, sample observations. n numeric. sample size. type character, case ignored. estimator type (mle, , ). ... extra arguments.","code":""},{"path":"https:///thechibo.github.io/estim/reference/Multinom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multinomial Distribution — Multinom","text":"type function returns different type object: Distribution Functions: supplied one argument (distr), d(), p(), q(), r(), ll() functions return density, cumulative probability, quantile, random sample generator, log-likelihood functions, respectively. supplied arguments (distr x), evaluate aforementioned functions directly. Moments: Returns numeric, either vector matrix depending moment distribution. moments() function returns list available methods. Estimation: Returns list. estimator unknown parameters. Note distribution families like binomial, multinomial, negative binomial, size returned, since considered known. Variance: Returns named matrix. asymptotic covariance matrix estimator.","code":""},{"path":"https:///thechibo.github.io/estim/reference/Nbinom.html","id":null,"dir":"Reference","previous_headings":"","what":"Negative Binomial Distribution — Nbinom","title":"Negative Binomial Distribution — Nbinom","text":"Negative Binomial Distribution","code":""},{"path":"https:///thechibo.github.io/estim/reference/Nbinom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Negative Binomial Distribution — Nbinom","text":"","code":"Nbinom(size = 1, prob = 0.5)  # S4 method for class 'Nbinom,numeric' d(distr, x)  # S4 method for class 'Nbinom,numeric' p(distr, x)  # S4 method for class 'Nbinom,numeric' qn(distr, x)  # S4 method for class 'Nbinom,numeric' r(distr, n)  # S4 method for class 'Nbinom' mean(x)  # S4 method for class 'Nbinom' median(x)  # S4 method for class 'Nbinom' mode(x)  # S4 method for class 'Nbinom' var(x)  # S4 method for class 'Nbinom' sd(x)  # S4 method for class 'Nbinom' skew(x)  # S4 method for class 'Nbinom' kurt(x)  # S4 method for class 'Nbinom' entro(x)  # S4 method for class 'Nbinom' finf(x)  llnbinom(x, size, prob)  # S4 method for class 'Nbinom,numeric' ll(distr, x)  enbinom(x, size, type = \"mle\", ...)  # S4 method for class 'Nbinom,numeric' mle(distr, x)  # S4 method for class 'Nbinom,numeric' me(distr, x)  vnbinom(size, prob, type = \"mle\")  # S4 method for class 'Nbinom' avar_mle(distr)  # S4 method for class 'Nbinom' avar_me(distr)"},{"path":"https:///thechibo.github.io/estim/reference/Nbinom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Negative Binomial Distribution — Nbinom","text":"size, prob numeric. distribution parameters. distr object class Nbinom. x object class Nbinom. function also distr argument, x numeric vector, sample observations. n numeric. sample size. type character, case ignored. estimator type (mle, , ). ... extra arguments.","code":""},{"path":"https:///thechibo.github.io/estim/reference/Nbinom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Negative Binomial Distribution — Nbinom","text":"type function returns different type object: Distribution Functions: supplied one argument (distr), d(), p(), q(), r(), ll() functions return density, cumulative probability, quantile, random sample generator, log-likelihood functions, respectively. supplied arguments (distr x), evaluate aforementioned functions directly. Moments: Returns numeric, either vector matrix depending moment distribution. moments() function returns list available methods. Estimation: Returns list. estimator unknown parameters. Note distribution families like binomial, multinomial, negative binomial, size returned, since considered known. Variance: Returns named matrix. asymptotic covariance matrix estimator.","code":""},{"path":"https:///thechibo.github.io/estim/reference/Norm.html","id":null,"dir":"Reference","previous_headings":"","what":"Normal Distribution — Norm","title":"Normal Distribution — Norm","text":"Normal Distribution","code":""},{"path":"https:///thechibo.github.io/estim/reference/Norm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normal Distribution — Norm","text":"","code":"Norm(mean = 0, sd = 1)  # S4 method for class 'Norm,numeric' d(distr, x)  # S4 method for class 'Norm,numeric' p(distr, x)  # S4 method for class 'Norm,numeric' qn(distr, x)  # S4 method for class 'Norm,numeric' r(distr, n)  # S4 method for class 'Norm' mean(x)  # S4 method for class 'Norm' median(x)  # S4 method for class 'Norm' mode(x)  # S4 method for class 'Norm' var(x)  # S4 method for class 'Norm' sd(x)  # S4 method for class 'Norm' skew(x)  # S4 method for class 'Norm' kurt(x)  # S4 method for class 'Norm' entro(x)  # S4 method for class 'Norm' finf(x)  llnorm(x, mean, sd)  # S4 method for class 'Norm,numeric' ll(distr, x)  enorm(x, type = \"mle\", ...)  # S4 method for class 'Norm,numeric' mle(distr, x)  # S4 method for class 'Norm,numeric' me(distr, x)  vnorm(mean, sd, type = \"mle\")  # S4 method for class 'Norm' avar_mle(distr)  # S4 method for class 'Norm' avar_me(distr)"},{"path":"https:///thechibo.github.io/estim/reference/Norm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normal Distribution — Norm","text":"mean, sd numeric. distribution parameters. distr object class Norm. x object class Norm. function also distr argument, x numeric vector, sample observations. n numeric. sample size. type character, case ignored. estimator type (mle, , ). ... extra arguments.","code":""},{"path":"https:///thechibo.github.io/estim/reference/Norm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normal Distribution — Norm","text":"type function returns different type object: Distribution Functions: supplied one argument (distr), d(), p(), q(), r(), ll() functions return density, cumulative probability, quantile, random sample generator, log-likelihood functions, respectively. supplied arguments (distr x), evaluate aforementioned functions directly. Moments: Returns numeric, either vector matrix depending moment distribution. moments() function returns list available methods. Estimation: Returns list. estimator unknown parameters. Note distribution families like binomial, multinomial, negative binomial, size returned, since considered known. Variance: Returns named matrix. asymptotic covariance matrix estimator.","code":""},{"path":"https:///thechibo.github.io/estim/reference/Pois.html","id":null,"dir":"Reference","previous_headings":"","what":"Poisson Distribution — Pois","title":"Poisson Distribution — Pois","text":"Poisson Distribution","code":""},{"path":"https:///thechibo.github.io/estim/reference/Pois.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Poisson Distribution — Pois","text":"","code":"Pois(lambda = 1)  # S4 method for class 'Pois,numeric' d(distr, x)  # S4 method for class 'Pois,numeric' p(distr, x)  # S4 method for class 'Pois,numeric' qn(distr, x)  # S4 method for class 'Pois,numeric' r(distr, n)  # S4 method for class 'Pois' mean(x)  # S4 method for class 'Pois' median(x)  # S4 method for class 'Pois' mode(x)  # S4 method for class 'Pois' var(x)  # S4 method for class 'Pois' sd(x)  # S4 method for class 'Pois' skew(x)  # S4 method for class 'Pois' kurt(x)  # S4 method for class 'Pois' entro(x)  # S4 method for class 'Pois' finf(x)  llpois(x, lambda)  # S4 method for class 'Pois,numeric' ll(distr, x)  epois(x, type = \"mle\", ...)  # S4 method for class 'Pois,numeric' mle(distr, x)  # S4 method for class 'Pois,numeric' me(distr, x)  vpois(lambda, type = \"mle\")  # S4 method for class 'Pois' avar_mle(distr)  # S4 method for class 'Pois' avar_me(distr)"},{"path":"https:///thechibo.github.io/estim/reference/Pois.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Poisson Distribution — Pois","text":"lambda numeric. distribution parameters. distr object class Pois. x object class Pois. function also distr argument, x numeric vector, sample observations. n numeric. sample size. type character, case ignored. estimator type (mle, , ). ... extra arguments.","code":""},{"path":"https:///thechibo.github.io/estim/reference/Pois.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Poisson Distribution — Pois","text":"type function returns different type object: Distribution Functions: supplied one argument (distr), d(), p(), q(), r(), ll() functions return density, cumulative probability, quantile, random sample generator, log-likelihood functions, respectively. supplied arguments (distr x), evaluate aforementioned functions directly. Moments: Returns numeric, either vector matrix depending moment distribution. moments() function returns list available methods. Estimation: Returns list. estimator unknown parameters. Note distribution families like binomial, multinomial, negative binomial, size returned, since considered known. Variance: Returns named matrix. asymptotic covariance matrix estimator.","code":""},{"path":"https:///thechibo.github.io/estim/reference/SmallMetrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Small Sample Metrics — SmallMetrics","title":"Small Sample Metrics — SmallMetrics","text":"function performs Monte Carlo simulations estimate main metrics (bias, variance, RMSE) characterizing small (finite) sample behavior estimator. function evaluates metrics function single parameter, keeping ones constant. See Details.","code":""},{"path":"https:///thechibo.github.io/estim/reference/SmallMetrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Small Sample Metrics — SmallMetrics","text":"","code":"SmallMetrics(D, est, df)  small_metrics(   D,   prm,   est = c(\"same\", \"me\", \"mle\"),   obs = c(20, 50, 100),   sam = 10000,   seed = 1,   ... )"},{"path":"https:///thechibo.github.io/estim/reference/SmallMetrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Small Sample Metrics — SmallMetrics","text":"D subclass Distribution. distribution family interest. est character. estimator interest. Can vector. df data.frame. data.frame columns named \"Row\", \"Col\", \"Parameter\", \"Estimator\", \"Value\". prm list containing three elements (name, pos, val). See Details. obs numeric. size sample. Can vector. sam numeric. number Monte Carlo samples used estimate metrics. seed numeric. Passed set.seed() reproducibility. ... extra arguments.","code":""},{"path":"https:///thechibo.github.io/estim/reference/SmallMetrics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Small Sample Metrics — SmallMetrics","text":"object class SmallMetrics slots D, est, df.","code":""},{"path":"https:///thechibo.github.io/estim/reference/SmallMetrics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Small Sample Metrics — SmallMetrics","text":"distribution D used specify initial distribution. list prm contains details concerning single parameter allowed change values. quantity interest evaluated function parameter. prm list includes two elements named \"name\" \"val\". first one specifies parameter changes, second one numeric vector holding values takes. case parameter interest vector, third element named \"pos\" can specified indicate exact paramater changes. example shown , evaluation performed Dirichlet distributions shape parameters (0.5, 1), (0.6, 1), ..., (2, 1). Notice initial shape parameter value (1) utilized function.","code":""},{"path":[]},{"path":"https:///thechibo.github.io/estim/reference/SmallMetrics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Small Sample Metrics — SmallMetrics","text":"","code":"# \\donttest{ # ----------------------------------------------------- # Beta Distribution Example # -----------------------------------------------------  D <- Beta(shape1 = 1, shape2 = 2)  prm <- list(name = \"shape1\",             val = seq(0.5, 2, by = 0.1))  x <- small_metrics(D, prm,                    est = c(\"mle\", \"me\", \"same\"),                    obs = c(20, 50),                    sam = 1e2,                    seed = 1)  plot(x)   # ----------------------------------------------------- # Dirichlet Distribution Example # -----------------------------------------------------  D <- Dir(alpha = 1:2)  prm <- list(name = \"alpha\",             pos = 1,             val = seq(0.5, 2, by = 0.1))  x <- small_metrics(D, prm,                    est = c(\"mle\", \"me\", \"same\"),                    obs = c(20, 50),                    sam = 1e2,                    seed = 1)  plot(x)  # }"},{"path":"https:///thechibo.github.io/estim/reference/Stud.html","id":null,"dir":"Reference","previous_headings":"","what":"Student Distribution — Stud","title":"Student Distribution — Stud","text":"Student Distribution","code":""},{"path":"https:///thechibo.github.io/estim/reference/Stud.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Student Distribution — Stud","text":"","code":"Stud(df = 1)  # S4 method for class 'Stud,numeric' d(distr, x)  # S4 method for class 'Stud,numeric' p(distr, x)  # S4 method for class 'Stud,numeric' qn(distr, x)  # S4 method for class 'Stud,numeric' r(distr, n)  # S4 method for class 'Stud' mean(x)  # S4 method for class 'Stud' median(x)  # S4 method for class 'Stud' mode(x)  # S4 method for class 'Stud' var(x)  # S4 method for class 'Stud' sd(x)  # S4 method for class 'Stud' skew(x)  # S4 method for class 'Stud' kurt(x)  # S4 method for class 'Stud' entro(x)  llt(x, df)  # S4 method for class 'Stud,numeric' ll(distr, x)"},{"path":"https:///thechibo.github.io/estim/reference/Stud.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Student Distribution — Stud","text":"df numeric. distribution parameter. distr object class Stud. x object class Stud. function also distr argument, x numeric vector, sample observations. n numeric. sample size.","code":""},{"path":"https:///thechibo.github.io/estim/reference/Stud.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Student Distribution — Stud","text":"type function returns different type object: Distribution Functions: supplied one argument (distr), d(), p(), q(), r(), ll() functions return density, cumulative probability, quantile, random sample generator, log-likelihood functions, respectively. supplied arguments (distr x), evaluate aforementioned functions directly. Moments: Returns numeric, either vector matrix depending moment distribution. moments() function returns list available methods. Estimation: Returns list. estimator unknown parameters. Note distribution families like binomial, multinomial, negative binomial, size returned, since considered known. Variance: Returns named matrix. asymptotic covariance matrix estimator.","code":""},{"path":"https:///thechibo.github.io/estim/reference/Unif.html","id":null,"dir":"Reference","previous_headings":"","what":"Uniform Distribution — Unif","title":"Uniform Distribution — Unif","text":"Uniform Distribution","code":""},{"path":"https:///thechibo.github.io/estim/reference/Unif.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uniform Distribution — Unif","text":"","code":"Unif(min = 0, max = 1)  # S4 method for class 'Unif,numeric' d(distr, x)  # S4 method for class 'Unif,numeric' p(distr, x)  # S4 method for class 'Unif,numeric' qn(distr, x)  # S4 method for class 'Unif,numeric' r(distr, n)  # S4 method for class 'Unif' mean(x)  # S4 method for class 'Unif' median(x)  # S4 method for class 'Unif' mode(x)  # S4 method for class 'Unif' var(x)  # S4 method for class 'Unif' sd(x)  # S4 method for class 'Unif' skew(x)  # S4 method for class 'Unif' kurt(x)  # S4 method for class 'Unif' entro(x)  llunif(x, min, max)  # S4 method for class 'Unif,numeric' ll(distr, x)  eunif(x, type = \"mle\", ...)  # S4 method for class 'Unif,numeric' mle(distr, x)  # S4 method for class 'Unif,numeric' me(distr, x)"},{"path":"https:///thechibo.github.io/estim/reference/Unif.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uniform Distribution — Unif","text":"min, max numeric. distribution parameters. distr object class Unif. x object class Unif. function also distr argument, x numeric vector, sample observations. n numeric. sample size. type character, case ignored. estimator type (mle, , ). ... extra arguments.","code":""},{"path":"https:///thechibo.github.io/estim/reference/Unif.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uniform Distribution — Unif","text":"type function returns different type object: Distribution Functions: supplied one argument (distr), d(), p(), q(), r(), ll() functions return density, cumulative probability, quantile, random sample generator, log-likelihood functions, respectively. supplied arguments (distr x), evaluate aforementioned functions directly. Moments: Returns numeric, either vector matrix depending moment distribution. moments() function returns list available methods. Estimation: Returns list. estimator unknown parameters. Note distribution families like binomial, multinomial, negative binomial, size returned, since considered known. Variance: Returns named matrix. asymptotic covariance matrix estimator.","code":""},{"path":"https:///thechibo.github.io/estim/reference/Weib.html","id":null,"dir":"Reference","previous_headings":"","what":"Weibull Distribution — Weib","title":"Weibull Distribution — Weib","text":"Weibull Distribution","code":""},{"path":"https:///thechibo.github.io/estim/reference/Weib.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Weibull Distribution — Weib","text":"","code":"Weib(shape = 1, scale = 1)  # S4 method for class 'Weib,numeric' d(distr, x)  # S4 method for class 'Weib,numeric' p(distr, x)  # S4 method for class 'Weib,numeric' qn(distr, x)  # S4 method for class 'Weib,numeric' r(distr, n)  # S4 method for class 'Weib' mean(x)  # S4 method for class 'Weib' median(x)  # S4 method for class 'Weib' mode(x)  # S4 method for class 'Weib' var(x)  # S4 method for class 'Weib' sd(x)  # S4 method for class 'Weib' skew(x)  # S4 method for class 'Weib' kurt(x)  # S4 method for class 'Weib' entro(x)  llweib(x, shape, scale)  # S4 method for class 'Weib,numeric' ll(distr, x)  eweib(x, type = \"mle\", ...)  # S4 method for class 'Weib,numeric' mle(distr, x, par0 = \"same\", method = \"L-BFGS-B\", lower = 1e-05, upper = Inf)  # S4 method for class 'Weib,numeric' me(distr, x)  # S4 method for class 'Weib,numeric' same(distr, x)  vweib(shape, scale, type = \"mle\")  # S4 method for class 'Weib' avar_mle(distr)  # S4 method for class 'Weib' avar_me(distr)  # S4 method for class 'Weib' avar_same(distr)"},{"path":"https:///thechibo.github.io/estim/reference/Weib.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weibull Distribution — Weib","text":"shape, scale numeric. distribution parameters. distr object class Weib. x object class Weib. function also distr argument, x numeric vector, sample observations. n numeric. sample size. type character, case ignored. estimator type (mle, , ). ... extra arguments. par0, method, lower, upper arguments passed optim.","code":""},{"path":"https:///thechibo.github.io/estim/reference/Weib.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Weibull Distribution — Weib","text":"type function returns different type object: Distribution Functions: supplied one argument (distr), d(), p(), q(), r(), ll() functions return density, cumulative probability, quantile, random sample generator, log-likelihood functions, respectively. supplied arguments (distr x), evaluate aforementioned functions directly. Moments: Returns numeric, either vector matrix depending moment distribution. moments() function returns list available methods. Estimation: Returns list. estimator unknown parameters. Note distribution families like binomial, multinomial, negative binomial, size returned, since considered known. Variance: Returns named matrix. asymptotic covariance matrix estimator.","code":""},{"path":"https:///thechibo.github.io/estim/reference/avar.html","id":null,"dir":"Reference","previous_headings":"","what":"Asymptotic Variance — avar","title":"Asymptotic Variance — avar","text":"functions calculate asymptotic variance (variance - covariance matrix multidimensional case) estimator, given specified family distributions true parameter values.","code":""},{"path":"https:///thechibo.github.io/estim/reference/avar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Asymptotic Variance — avar","text":"","code":"avar(distr, type, ...)  avar_mle(distr, ...)  avar_me(distr, ...)  avar_same(distr, ...)"},{"path":"https:///thechibo.github.io/estim/reference/avar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Asymptotic Variance — avar","text":"distr Distribution object. type character, case ignored. estimator type (\"mle\", \"\", \"\"). ... extra arguments.","code":""},{"path":"https:///thechibo.github.io/estim/reference/avar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Asymptotic Variance — avar","text":"named matrix. asymptotic covariance matrix estimator.","code":""},{"path":"https:///thechibo.github.io/estim/reference/avar.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Asymptotic Variance — avar","text":"avar_mle(): Asymptotic Variance Maximum Likelihood Estimator avar_me(): Asymptotic Variance Moment Estimator avar_same(): Asymptotic Variance Score-Adjusted Moment Estimator","code":""},{"path":"https:///thechibo.github.io/estim/reference/avar.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Asymptotic Variance — avar","text":"General Textbooks Van der Vaart, . W. (2000), Asymptotic statistics, Vol. 3, Cambridge university press. Beta gamma distribution families Ye, Z.-S. & Chen, N. (2017), Closed-form estimators gamma distribution derived likelihood equations, American Statistician 71(2), 177–181. Tamae, H., Irie, K. & Kubokawa, T. (2020), score-adjusted approach closed-form estimators gamma beta distributions, Japanese Journal Statistics Data Science 3, 543–561. Mathal, . & Moschopoulos, P. (1992), form multivariate gamma distribution, Annals Institute Statistical Mathematics 44, 97–106. Oikonomidis, . & Trevezas, S. (2023), Moment-Type Estimators Dirichlet Multivariate Gamma Distributions, arXiv, https://arxiv.org/abs/2311.15025","code":""},{"path":[]},{"path":"https:///thechibo.github.io/estim/reference/avar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Asymptotic Variance — avar","text":"","code":"# ----------------------------------------------------- # Beta Distribution Example # -----------------------------------------------------  # Simulation set.seed(1) a <- 1 b <- 2 D <- Beta(a, b) x <- r(D)(100)  # Point Estimation - The e Functions  ebeta(x, type = \"mle\") #> $shape1 #> [1] 1.066968 #>  #> $shape2 #> [1] 2.466715 #>  ebeta(x, type = \"me\") #> $shape1 #> [1] 1.074511 #>  #> $shape2 #> [1] 2.469756 #>  ebeta(x, type = \"same\") #> $shape1 #> [1] 1.067768 #>  #> $shape2 #> [1] 2.454257 #>   mle(D, x) #> $shape1 #> [1] 1.066968 #>  #> $shape2 #> [1] 2.466715 #>  me(D, x) #> $shape1 #> [1] 1.074511 #>  #> $shape2 #> [1] 2.469756 #>  same(D, x) #> $shape1 #> [1] 1.067768 #>  #> $shape2 #> [1] 2.454257 #>  e(D, x, type = \"mle\") #> $shape1 #> [1] 1.066968 #>  #> $shape2 #> [1] 2.466715 #>   mle(\"beta\", x) # the distr argument can be a character #> $shape1 #> [1] 1.066968 #>  #> $shape2 #> [1] 2.466715 #>   # Asymptotic Variance - The v Functions  vbeta(a, b, type = \"mle\") #>          shape1   shape2 #> shape1 1.597168 2.523104 #> shape2 2.523104 7.985838 vbeta(a, b, type = \"me\") #>        shape1 shape2 #> shape1    2.1    3.3 #> shape2    3.3    9.3 vbeta(a, b, type = \"same\") #>          shape1   shape2 #> shape1 1.644934 2.539868 #> shape2 2.539868 8.079736  avar_mle(D) #>          shape1   shape2 #> shape1 1.597168 2.523104 #> shape2 2.523104 7.985838 avar_me(D) #>        shape1 shape2 #> shape1    2.1    3.3 #> shape2    3.3    9.3 avar_same(D) #>          shape1   shape2 #> shape1 1.644934 2.539868 #> shape2 2.539868 8.079736  avar(D, type = \"mle\") #>          shape1   shape2 #> shape1 1.597168 2.523104 #> shape2 2.523104 7.985838"},{"path":"https:///thechibo.github.io/estim/reference/calculus.html","id":null,"dir":"Reference","previous_headings":"","what":"Distribution Calculus — calculus","title":"Distribution Calculus — calculus","text":"Distribution Calculus","code":""},{"path":"https:///thechibo.github.io/estim/reference/calculus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distribution Calculus — calculus","text":"","code":"# S4 method for class 'Norm,Norm' e1 + e2  # S4 method for class 'numeric,Norm' e1 + e2  # S4 method for class 'Norm,numeric' e1 + e2  # S4 method for class 'Norm,Norm' e1 - e2  # S4 method for class 'numeric,Norm' e1 - e2  # S4 method for class 'Norm,numeric' e1 - e2  # S4 method for class 'numeric,Norm' e1 * e2  # S4 method for class 'Norm,numeric' e1 * e2  # S4 method for class 'Norm,numeric' e1/e2  # S4 method for class 'Norm,logical' sum(x, ..., na.rm = FALSE)  # S4 method for class 'Norm' exp(x)"},{"path":"https:///thechibo.github.io/estim/reference/calculus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distribution Calculus — calculus","text":"x, e1, e2 objects subclass Distribution. ... extra arguments. na.rm logical. missing values removed?","code":""},{"path":"https:///thechibo.github.io/estim/reference/calculus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distribution Calculus — calculus","text":"calculations return Distribution objects (specifically, objects class subclass Distribution), accordingly property hand.","code":""},{"path":"https:///thechibo.github.io/estim/reference/calculus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distribution Calculus — calculus","text":"","code":"# ----------------------------------------------------- # Distribution Calculus Example # -----------------------------------------------------  library(estim)  # Normal location - scale transformation x <- Norm(mean = 2, sd = 3) y <- 3 * x + 1 # Norm(mean = 7, sd = 9)  # Addition of two independent Normal random variables x1 <- Norm(mean = 1, sd = 3) x2 <- Norm(mean = 2, sd = 4) x3 <- x1 + x2 # Norm(mean = 3, sd = 5)"},{"path":"https:///thechibo.github.io/estim/reference/estim-package.html","id":null,"dir":"Reference","previous_headings":"","what":"estim: Parameter Estimation — estim-package","title":"estim: Parameter Estimation — estim-package","text":"Implements estimation methods parameters common distribution families. common d, p, q, r function family distribution enriched ll, e, v counterparts, computing log-likelihood, performing estimation, calculating asymptotic variance - covariance matrix, respectively. Parameter estimation performed analytically whenever possible.","code":""},{"path":[]},{"path":"https:///thechibo.github.io/estim/reference/estim-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"estim: Parameter Estimation — estim-package","text":"Maintainer: Ioannis Oikonomidis goikon@math.uoa.gr (ORCID) Authors: Samis Trevezas strevezas@math.uoa.gr (ORCID) [thesis advisor]","code":""},{"path":"https:///thechibo.github.io/estim/reference/estimation.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameter Estimation — estimation","title":"Parameter Estimation — estimation","text":"set functions estimates parameters random sample according specified family distributions. See details.","code":""},{"path":"https:///thechibo.github.io/estim/reference/estimation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parameter Estimation — estimation","text":"","code":"e(distr, x, type = \"mle\", ...)  mle(distr, x, ...)  # S4 method for class 'character,ANY' mle(distr, x, ...)  me(distr, x, ...)  # S4 method for class 'character,ANY' me(distr, x, ...)  same(distr, x, ...)  # S4 method for class 'character,ANY' same(distr, x, ...)"},{"path":"https:///thechibo.github.io/estim/reference/estimation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameter Estimation — estimation","text":"distr Distribution object character. distribution family assumed. x numeric. sample estimation. type character, case ignored. estimator type (mle, , ). ... extra arguments.","code":""},{"path":"https:///thechibo.github.io/estim/reference/estimation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parameter Estimation — estimation","text":"list. estimator unknown parameters. Note distribution families like binomial, multinomial, negative binomial, size returned, since considered known.","code":""},{"path":"https:///thechibo.github.io/estim/reference/estimation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parameter Estimation — estimation","text":"package covers three major estimation methods: maximum likelihood estimation (MLE), moment estimation (), score-adjusted estimation (). order perform parameter estimation, new e<name>() member added d(), p(), q(), r() family, following standard stats name convention. functions take two arguments, observations x (atomic vector univariate matrix multivariate distibutions) type estimation method use (character possible values \"mle\", \"\", \"\".) Point estimation functions available two versions, distribution specific one, e.g. ebeta(), S4 generic ones, namely mle(), (), (). general function called e() also implemented, covering distributions estimators.","code":""},{"path":"https:///thechibo.github.io/estim/reference/estimation.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Parameter Estimation — estimation","text":"mle(): Maximum Likelihood Estimator (): Moment Estimator (): Score - Adjusted Moment Estimation","code":""},{"path":"https:///thechibo.github.io/estim/reference/estimation.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Parameter Estimation — estimation","text":"General Textbooks Van der Vaart, . W. (2000), Asymptotic statistics, Vol. 3, Cambridge university press. Beta gamma distribution families Ye, Z.-S. & Chen, N. (2017), Closed-form estimators gamma distribution derived likelihood equations, American Statistician 71(2), 177–181. Tamae, H., Irie, K. & Kubokawa, T. (2020), score-adjusted approach closed-form estimators gamma beta distributions, Japanese Journal Statistics Data Science 3, 543–561. Mathal, . & Moschopoulos, P. (1992), form multivariate gamma distribution, Annals Institute Statistical Mathematics 44, 97–106. Oikonomidis, . & Trevezas, S. (2023), Moment-Type Estimators Dirichlet Multivariate Gamma Distributions, arXiv, https://arxiv.org/abs/2311.15025","code":""},{"path":[]},{"path":"https:///thechibo.github.io/estim/reference/estimation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parameter Estimation — estimation","text":"","code":"# ----------------------------------------------------- # Beta Distribution Example # -----------------------------------------------------  # Simulation set.seed(1) a <- 1 b <- 2 D <- Beta(a, b) x <- r(D)(100)  # Point Estimation - The e Functions  ebeta(x, type = \"mle\") #> $shape1 #> [1] 1.066968 #>  #> $shape2 #> [1] 2.466715 #>  ebeta(x, type = \"me\") #> $shape1 #> [1] 1.074511 #>  #> $shape2 #> [1] 2.469756 #>  ebeta(x, type = \"same\") #> $shape1 #> [1] 1.067768 #>  #> $shape2 #> [1] 2.454257 #>   mle(D, x) #> $shape1 #> [1] 1.066968 #>  #> $shape2 #> [1] 2.466715 #>  me(D, x) #> $shape1 #> [1] 1.074511 #>  #> $shape2 #> [1] 2.469756 #>  same(D, x) #> $shape1 #> [1] 1.067768 #>  #> $shape2 #> [1] 2.454257 #>  e(D, x, type = \"mle\") #> $shape1 #> [1] 1.066968 #>  #> $shape2 #> [1] 2.466715 #>   mle(\"beta\", x) # the distr argument can be a character #> $shape1 #> [1] 1.066968 #>  #> $shape2 #> [1] 2.466715 #>   # Asymptotic Variance - The v Functions  vbeta(a, b, type = \"mle\") #>          shape1   shape2 #> shape1 1.597168 2.523104 #> shape2 2.523104 7.985838 vbeta(a, b, type = \"me\") #>        shape1 shape2 #> shape1    2.1    3.3 #> shape2    3.3    9.3 vbeta(a, b, type = \"same\") #>          shape1   shape2 #> shape1 1.644934 2.539868 #> shape2 2.539868 8.079736  avar_mle(D) #>          shape1   shape2 #> shape1 1.597168 2.523104 #> shape2 2.523104 7.985838 avar_me(D) #>        shape1 shape2 #> shape1    2.1    3.3 #> shape2    3.3    9.3 avar_same(D) #>          shape1   shape2 #> shape1 1.644934 2.539868 #> shape2 2.539868 8.079736  avar(D, type = \"mle\") #>          shape1   shape2 #> shape1 1.597168 2.523104 #> shape2 2.523104 7.985838"},{"path":"https:///thechibo.github.io/estim/reference/idigamma.html","id":null,"dir":"Reference","previous_headings":"","what":"Polygamma Functions — idigamma","title":"Polygamma Functions — idigamma","text":"set functions revolve around polygamma functions, .e. derivatives gamma function.","code":""},{"path":"https:///thechibo.github.io/estim/reference/idigamma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Polygamma Functions — idigamma","text":"","code":"idigamma(x, ...)  Ddigamma(x, y)  Dtrigamma(x, y)  gammap(x, p, log = FALSE)"},{"path":"https:///thechibo.github.io/estim/reference/idigamma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Polygamma Functions — idigamma","text":"x, y numeric. points evaluate function. ... extra arguments passed optim(). p integer. p-variate Gamma function. log logical. logarithm result returned?","code":""},{"path":"https:///thechibo.github.io/estim/reference/idigamma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Polygamma Functions — idigamma","text":"numeric. evaluated function.","code":""},{"path":"https:///thechibo.github.io/estim/reference/idigamma.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Polygamma Functions — idigamma","text":"functions needed beta gamma distribution families (multivariate analogs, e.g. Dirichlet). appear estimation asymptotic variance-covariance matrix MLE . idigamma() function implements inverse digamma function \\(\\psi\\). numerical approximation based L-BFGS-U quasi-Newton algorithm. Specifically, idigamma() makes call optim() order solve equation \\(\\psi(x) = y\\); accurately, find minimum \\(f(x) = \\log\\Gamma(x) - xy\\), whose derivative \\(f'(x) = \\psi(x) - y\\). optimization restricted within tight bounds derived Batir (2017). function vectorized.","code":""},{"path":"https:///thechibo.github.io/estim/reference/idigamma.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Polygamma Functions — idigamma","text":"idigamma(): inverse digamma function. Ddigamma(): digamma difference function. Dtrigamma(): trigamma difference function. gammap(): p-variate gamma function","code":""},{"path":"https:///thechibo.github.io/estim/reference/idigamma.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Polygamma Functions — idigamma","text":"Necdet Batir (2017), INEQUALITIES INVERSES POLYGAMMA FUNCTIONS https://arxiv.org/pdf/1705.06547 Oikonomidis, . & Trevezas, S. (2023), Moment-Type Estimators Dirichlet Multivariate Gamma Distributions, arXiv, https://arxiv.org/abs/2311.15025","code":""},{"path":"https:///thechibo.github.io/estim/reference/idigamma.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Polygamma Functions — idigamma","text":"","code":"idigamma(2) #> [1] 7.883429 Ddigamma(2, 3) #> [1] -0.5 Dtrigamma(2, 3) #> [1] 0.25 gammap(1:3, 3) #> [1]       Inf  4.934802 14.804407"},{"path":"https:///thechibo.github.io/estim/reference/loglikelihood.html","id":null,"dir":"Reference","previous_headings":"","what":"Log-Likelihood Function — loglikelihood","title":"Log-Likelihood Function — loglikelihood","text":"function calculates log-likelihood independent identically distributed (iid) sample distribution. See Details.","code":""},{"path":"https:///thechibo.github.io/estim/reference/loglikelihood.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log-Likelihood Function — loglikelihood","text":"","code":"ll(distr, x, ...)"},{"path":"https:///thechibo.github.io/estim/reference/loglikelihood.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log-Likelihood Function — loglikelihood","text":"distr Distribution object x numeric. sample estimation. ... extra arguments.","code":""},{"path":"https:///thechibo.github.io/estim/reference/loglikelihood.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log-Likelihood Function — loglikelihood","text":"distr argument supplied, ll() returns function. distr x supplied, ll() returns numeric, value log-likelihood function.","code":""},{"path":"https:///thechibo.github.io/estim/reference/loglikelihood.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Log-Likelihood Function — loglikelihood","text":"log-likelihood functions provided two forms: ll<name> distribution-specific version follows stats package conventions, S4 generic ll. Examples ll<name> version included distribution-specific help pages, e.g. ?Beta (distributions can found See Also section Distributions help page). d(), p(), q(), r() methods, ll() can supplied distr return log-likelihood function (.e. can used functional), distr x evaluated directly. distribution families like beta gamma, MLE explicitly derived numerical optimization algorithms employed. Even “good\" scenarios, plenty observations smooth optimization function, extra care taken ensure fast right convergence possible. Two important steps taken package direction: log-likelihood function analytically calculated distribution family, constant terms respect parameters can removed, leaving sufficient statistics requirement function evaluation. Multidimensional problems reduced unidimensional ones utilizing score equations. resulting function inserted optimization algorithm called lloptim(), confused actual log-likelihood function ll(). corresponding derivative called dlloptim(). functions used internally exported. Therefore, whenever numerical computation MLE required, optim() called optimize lloptim(), using starting point (user's choice), L-BFGS-U optimization algorithm, lower upper limits defined default parameter space boundary. Illustrative examples can found package vignette.","code":""},{"path":[]},{"path":"https:///thechibo.github.io/estim/reference/loglikelihood.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Log-Likelihood Function — loglikelihood","text":"","code":"# ----------------------------------------------------- # Beta Distribution Example # -----------------------------------------------------  # Create the distribution D <- Beta(3, 5)  # Simulate a random sample from D set.seed(932) x <- r(D)(100)  f <- ll(D) ; f(x) # used as a functional #> [1] 43.60332 ll(D, x) #> [1] 43.60332"},{"path":"https:///thechibo.github.io/estim/reference/moments.html","id":null,"dir":"Reference","previous_headings":"","what":"Moments - Parametric Quantities of Interest — moments","title":"Moments - Parametric Quantities of Interest — moments","text":"set functions calculate theoretical moments (expectation, variance, skewness, excess kurtosis) important parametric functions (median, mode, entropy, Fisher information) distribution.","code":""},{"path":"https:///thechibo.github.io/estim/reference/moments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Moments - Parametric Quantities of Interest — moments","text":"","code":"moments(x)  mean(x, ...)  median(x, na.rm = FALSE, ...)  mode(x)  var(x, y = NULL, na.rm = FALSE, use)  sd(x, na.rm = FALSE)  skew(x, ...)  kurt(x, ...)  entro(x, ...)  finf(x, ...)"},{"path":"https:///thechibo.github.io/estim/reference/moments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Moments - Parametric Quantities of Interest — moments","text":"x Distribution object. ... extra arguments. y, use, na.rm arguments mean var standard methods stats package used .","code":""},{"path":"https:///thechibo.github.io/estim/reference/moments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Moments - Parametric Quantities of Interest — moments","text":"Numeric, either vector matrix depending moment distribution. moments() function returns list available methods.","code":""},{"path":"https:///thechibo.github.io/estim/reference/moments.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Moments - Parametric Quantities of Interest — moments","text":"Given distribution, functions calculate theoretical moments parametric quantities interest. distribution-function combinations available; example, sd() function available univariate distributions. moments() function automatically finds available methods given distribution results results list. Technical Note: argument moment functions follow naming convention package, .e. Distribution object names x rather distr. due fact generics already defined stats package (mean, median, mode, var, sd), therefore first argument already named x change.","code":""},{"path":"https:///thechibo.github.io/estim/reference/moments.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Moments - Parametric Quantities of Interest — moments","text":"median(): Median mode(): Mode var(): Variance sd(): Standard Deviation skew(): Skewness kurt(): Kurtosis entro(): Entropy finf(): Fisher Information (numeric matrix)","code":""},{"path":[]},{"path":"https:///thechibo.github.io/estim/reference/moments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Moments - Parametric Quantities of Interest — moments","text":"","code":"# ----------------------------------------------------- # Beta Distribution Example # -----------------------------------------------------  # Create the distribution D <- Beta(3, 5)  # List of all available moments mom <- moments(D)  # Expectation mean(D) #> [1] 0.375 mom$mean #> [1] 0.375  # Variance and Standard Deviation var(D) #> [1] 0.02604167 sd(D) #> [1] 0.1613743  # Skewness and Excess Kurtosis skew(D) #> [1] 0.3098387 kurt(D) #> [1] 0.04  # Entropy entro(D) #> [1] -0.4301508  # Fisher Information Matrix finf(D) #>            shape1      shape2 #> shape1  0.2617971 -0.13313701 #> shape2 -0.1331370  0.08818594"},{"path":"https:///thechibo.github.io/estim/reference/plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Metrics — plot","title":"Plot Metrics — plot","text":"function provides easy way illustrate objects class SmallMetrics LargeMetrics, using ggplot2 package. See details.","code":""},{"path":"https:///thechibo.github.io/estim/reference/plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Metrics — plot","text":"","code":"plot(x, y, ...)  # S4 method for class 'SmallMetrics,missing' plot(   x,   y = NULL,   colors = NULL,   title = NULL,   save = FALSE,   path = NULL,   name = \"myplot.pdf\",   width = 15,   height = 8 )  # S4 method for class 'LargeMetrics,missing' plot(   x,   y = NULL,   colors = NULL,   title = NULL,   save = FALSE,   path = NULL,   name = \"myplot.pdf\",   width = 15,   height = 8 )"},{"path":"https:///thechibo.github.io/estim/reference/plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Metrics — plot","text":"x object class SmallMetrics LargeMetrics. y NULL. ... extra arguments. colors character. colors used plot. title character. plot title. save logical. plot saved? path path directory plot saved. name character. name output pdf file. width numeric. plot width inches. height numeric. plot height inches.","code":""},{"path":"https:///thechibo.github.io/estim/reference/plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Metrics — plot","text":"plot returned invisibly form ggplot object.","code":""},{"path":"https:///thechibo.github.io/estim/reference/plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Metrics — plot","text":"Objects class SmallMetrics LargeMetrics returned small_metrics() large_metrics() functions, respectively. SmallMetrics, grid line charts created metric sample size. LargeMetrics, grid line charts created element asymptotic variance - covariance matrix. estimator plotted different color line type. plot can saved pdf format.","code":""},{"path":[]},{"path":"https:///thechibo.github.io/estim/reference/plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Metrics — plot","text":"","code":"# \\donttest{ # ----------------------------------------------------- # Beta Distribution Example # -----------------------------------------------------  D <- Beta(shape1 = 1, shape2 = 2)  prm <- list(name = \"shape1\",             val = seq(0.5, 2, by = 0.1))  x <- small_metrics(D, prm,                    est = c(\"mle\", \"me\", \"same\"),                    obs = c(20, 50),                    sam = 1e2,                    seed = 1)  plot(x)   # ----------------------------------------------------- # Dirichlet Distribution Example # -----------------------------------------------------  D <- Dir(alpha = 1:2)  prm <- list(name = \"alpha\",             pos = 1,             val = seq(0.5, 2, by = 0.1))  x <- small_metrics(D, prm,                    est = c(\"mle\", \"me\", \"same\"),                    obs = c(20, 50),                    sam = 1e2,                    seed = 1)  plot(x)  # }"},{"path":"https:///thechibo.github.io/estim/news/index.html","id":"estim-0111","dir":"Changelog","previous_headings":"","what":"estim 0.11.1","title":"estim 0.11.1","text":"Added pkgdown check. Attempted fix compact-vignettes bug.","code":""},{"path":"https:///thechibo.github.io/estim/news/index.html","id":"estim-0110","dir":"Changelog","previous_headings":"","what":"estim 0.11.0","title":"estim 0.11.0","text":"Changed plot_small_metrics, plot_large_metrics plot Updated documentation pages. Added methods d(D, x), p(D, x) etc. Added Multigam Weibull distributions. Changed estim() e(). Changed estimators lists instead atomic vectors. Created accurate idigamma() function.","code":""},{"path":"https:///thechibo.github.io/estim/news/index.html","id":"estim-0103","dir":"Changelog","previous_headings":"","what":"estim 0.10.3","title":"estim 0.10.3","text":"Added new JSS vignette.","code":""},{"path":"https:///thechibo.github.io/estim/news/index.html","id":"estim-0102","dir":"Changelog","previous_headings":"","what":"estim 0.10.2","title":"estim 0.10.2","text":"Tried update test-coverage. Fixed bug Nbinom test.","code":""},{"path":"https:///thechibo.github.io/estim/news/index.html","id":"estim-0101","dir":"Changelog","previous_headings":"","what":"estim 0.10.1","title":"estim 0.10.1","text":"Removed false documentation file caused R CMD check fail.","code":""},{"path":"https:///thechibo.github.io/estim/news/index.html","id":"estim-0100","dir":"Changelog","previous_headings":"","what":"estim 0.10.0","title":"estim 0.10.0","text":"Added tests distributions. Added many functions available several distributions. Corrected multiple bugs. Removed Ncchisq, Ncfisher. added later versions.","code":""},{"path":"https:///thechibo.github.io/estim/news/index.html","id":"estim-090","dir":"Changelog","previous_headings":"","what":"estim 0.9.0","title":"estim 0.9.0","text":"Changed package name estim. Fixed Fisher df bug. Added NcFisher.","code":""}]
